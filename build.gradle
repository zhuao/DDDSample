import com.sun.xml.internal.rngom.ast.builder.BuildException
import sun.misc.Regexp

import java.util.regex.Matcher


//apply plugin: 'java'
//apply plugin: 'org.springframework.boot'


//sourceCompatibility = 1.8
repositories {
    mavenCentral()

}


buildscript {

    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.3.RELEASE"
        classpath 'net.researchgate:gradle-release:2.4.0'
        classpath 'org.ajoberstar:gradle-git:1.7.2'

    }
}

//plugins {
//    id 'org.ajoberstar.grgit' version '1.7.2'
//}

group 'com.tw.dddsample.demo'

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'net.researchgate.release'
apply plugin: 'org.ajoberstar.grgit'

dependencies {

    compile (group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '1.5.3.RELEASE') {
        exclude module: 'spring-boot-starter-tomcat'
    }
    compile group: 'org.springframework.boot', name: 'spring-boot-starter', version: '1.5.3.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '1.5.3.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-rest', version: '1.5.3.RELEASE'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
    compile group: 'org.hsqldb', name: 'hsqldb', version: '2.3.4'


    runtime group: 'com.h2database', name: 'h2', version: '1.4.195'

    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '1.5.3.RELEASE'
//    testCompile group: 'com.jayway.jsonpath', name: 'json-path', version: '1.5.3.RELEASE'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'com.jayway.restassured', name: 'rest-assured', version: '2.9.0'



}


release {
    failOnUpdateNeeded = false
    tagTemplate = '${version}'
    preCommitText = ''
    preTagCommitMessage = '[Gradle Release Plugin] - pre tag commit: '
    tagCommitMessage = '[Gradle Release Plugin] - creating tag: '
    newVersionCommitMessage = '[Gradle Release Plugin] - new version commit: '
    tagTemplate = '${version}'
    versionPropertyFile = 'gradle.properties'
    versionProperties = ['version']
    buildTasks = ['build']
    versionPatterns = [
            /(\d+)([^\d]*$)/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}${m[0][2]}") }
    ]
    scmAdapters = [
            net.researchgate.release.GitAdapter
    ]

    git {
        requireBranch = 'master'
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
        commitVersionFileOnly = false
    }
}

task tagRelease {
    description = 'Tags the current head with the project\'s version.'
    doLast {
//        grgit.tag.add {
//            name = version
//            message = "Release of ${version}"
//        }


        try {
            def branches = grgit.branch.list(contains: 'origin/master', mode: 'REMOTE')
        } catch (ignored) {
            println("fail not found")
        }
//        println("==status==" + branches)

    }
}

task createReleaseBranch() {
    try {
        println '=============='
        def branchout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
            standardOutput = branchout
        }

//                def branch = branchout.toString().trim()

        def releaseBranch = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'branch', '--list', '-r', '|', 'grep', 'release'
            standardOutput = releaseBranch
        }
        def branch = releaseBranch.toString().trim()

        if (branch) {
            println '======release existed========'
            exec { commandLine 'git', 'checkout', 'release' }
            exec { commandLine 'git', 'merge', 'master' }

        } else {
            println '======release not========'
            exec { commandLine 'git', 'branch', '-D', 'release' }
            exec { commandLine 'git', 'checkout', '-b', 'release' }
            exec { commandLine 'git', 'checkout', 'master' }
            println '=====version----:'
            def nextversion = nextVersion(version)
            println("=====version: ${nextversion}")
            exec { commandLine 'git', 'add', '.' }
            exec { commandLine 'git', 'commit', '-m', 'Pre commit:change version to ${nextversion}'}
        }


        if (branch.equals("master")) {
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'describe', '--tags'
                standardOutput = stdout
            }
            return stdout.toString().trim()
        } else {
            return branch;
        }
    }
    catch (ignored) {
        return null;
    }
}


project.task('release2', description: 'Verify project, release, and update version to next.', group: 'phasedRelease', type: GradleBuild) {

    String p = project.path
    p = !p.endsWith(Project.PATH_SEPARATOR) ? p + Project.PATH_SEPARATOR : p

    startParameter = project.getGradle().startParameter.newInstance()

    tasks = [
            "${p}createScmAdapter" as String,
            "${p}initScmAdapter" as String,
//            "${p}checkCommitNeeded" as String,
            "${p}checkUpdateNeeded" as String,
//            "${p}unSnapshotVersion" as String,
            "${p}confirmReleaseVersion" as String,
            "${p}checkSnapshotDependencies" as String,
//            "${p}runBuildTasks" as String,
//            "${p}preTagCommit" as String,
//            "${p}createReleaseTag" as String,
//            "${p}updateVersion" as String,
//            "${p}commitNewVersion" as String

    ]
}

def nextVersion(String currentVersion) {
    def nextVersion =  currentVersion + 1;
    println '=====version----:1:'
    project.version = nextVersion
    println '=====version----:2:'
//    attributes.versionModified = true
    println '=====version----:3:'
    project.subprojects?.each { it.version = nextVersion }
    println '=====version----:4:'
    println '=====version----:5:'
    writeVersion(project.file("gradle.properties"), 'version', project.version)
    println '=====version----:6:'
    println("=====---${nextVersion}")
}

def writeVersion(File file, String key, Object version) {
    try {
        if (!file.file) {
            project.ant.echo(file: file, message: "$key=$version")
        } else {
            // we use replace here as other ant tasks escape and modify the whole file
            project.ant.replaceregexp(file: file, byline: true) {
                regexp(pattern: "^(\\s*)$key((\\s*[=|:]\\s*)|(\\s+)).+\$")
                substitution(expression: "\\1$key\\2$version")
            }
        }
    } catch (BuildException be) {
        throw new GradleException('Unable to write version property.', be)
    }

}

