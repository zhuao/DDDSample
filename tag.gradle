import com.sun.xml.internal.rngom.ast.builder.BuildException

ext.mergeDevelopingCodeToRelease = {
    def releaseBranch = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'branch', '--list', '-r', '|', 'grep', 'release'
        standardOutput = releaseBranch
    }
    def branch = releaseBranch.toString().trim()

    if (branch) {
        mergeToRelease()
        moveMasterBranchForward()
    } else {
        createReleaseBranch()
        moveMasterBranchForward()
    }
}

private void mergeToRelease() {
    exec { commandLine 'git', 'fetch' }
    exec { commandLine 'git', 'checkout', 'release' }
    exec { commandLine 'git', 'merge', 'master' }
}

private ExecResult moveMasterBranchForward() {
    def nextversion = nextVersion(version)
    writeVersion(project.file("gradle.properties"), 'version', nextversion)

    exec { commandLine 'git', 'add', '.' }
    exec { commandLine 'git', 'commit', '-m', 'Pre commit:change version to '+ nextversion}
    exec { commandLine 'git', 'push', 'origin', 'master'}
}

private void createReleaseBranch() {
    exec { commandLine 'git', 'checkout', '-b', 'release' }
    exec { commandLine 'git', 'push', 'origin', 'release' }
    exec { commandLine 'git', 'checkout', 'master' }
}


def nextVersion(String currentVersion) {
    def versionNumber
    if (currentVersion.contains("-SNAPSHOT")) {
        versionNumber = currentVersion.replace("-SNAPSHOT", "")
    } else {
        versionNumber = currentVersion
    }

    def index = versionNumber.lastIndexOf('.')
    def patchVersion = versionNumber.substring(index + 1)
    def newPatchVersion = (patchVersion as int) + 1
    def nextVersion = versionNumber.substring(0, index + 1) + newPatchVersion
    nextVersion = currentVersion.contains("-SNAPSHOT") ? nextVersion + '-SNAPSHOT': nextVersion
}

def writeVersion(File file, String key, Object version) {
    try {
        if (!file.file) {
            project.ant.echo(file: file, message: "$key=$version")
        } else {
            // we use replace here as other ant tasks escape and modify the whole file
            project.ant.replaceregexp(file: file, byline: true) {
                regexp(pattern: "^(\\s*)$key((\\s*[=|:]\\s*)|(\\s+)).+\$")
                substitution(expression: "\\1$key\\2$version")
            }
        }
    } catch (BuildException be) {
        throw new GradleException('Unable to write version property.', be)
    }

}

